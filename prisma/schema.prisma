generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  chats    Chat[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Chat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  userId      String   @db.ObjectId
  lastMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  documents Document[]

  @@map("chat")
}

model Message {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  sender      String
  chatId      String      @db.ObjectId
  streaming   Boolean?
  role        MessageRole
  generatedBy String?
  sessionId   String      @db.ObjectId
  createdAt   DateTime    @default(now())

  session Chat @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Document {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  content   String
  fileType  String
  fileSize  Int
  sessionId String   @db.ObjectId
  createdAt DateTime @default(now())

  session Chat @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum MessageRole {
  user
  bot
}
